
--------------------------------------------------------------------------------
--
-- Bool

struct true:  Bool
struct false: Bool



--------------------------------------------------------------------------------
--
-- List

struct nil:  List
struct cons: Num -> List -> List



-- Returns the first element of a list
head: List -> Num
head(cons(x _)) = x
-------------------   
head([]) ? 0
head([3]) ? 3



tail: 
-- Tail is the dual of head;  returns the [1 .. n] elements of the list  

      List        -> List
tail( nil()      ) = nil
tail( cons(_ xs) ) = xs 
-----------------------
tail( [3] ) ? []



length:
-- Returns the cardinality of a list 
  
     List        -> Num
   ( nil()      ) = 0
   ( cons(_ xs) ) = 1 + length(xs)
   -------------------------------
   length([]) ? 0
   length([1]) ? 1


-- Returns the nth element of the list in O(n)
get: Num -> List     -> Num
   ( 0    cons(x _) ) = x
   ( n    cons(_ x) ) = get(n - 1, x)

get( 1    [2 3] )     ? 3
get( 0    [] )        ? 1



reverse: 
-- Generates a list with the same elements in reverse order.  Requires 
-- traversing the entire list, O(n)
     
     List        -> List
   ( nil()      ) = nil
   ( cons(x xs) ) = concat(reverse(xs) cons(x nil))
   ------------------------------------------------
   ( [] ) ? []
   ( [1] ) ? [1]
   ( [1, 2] ) ? [2, 1]
   ( [3, 2, 1] ) ? [1, 2, 3]



concat:
-- Concatenates two lists end to end, returning the resultant list.  It 
-- performs in O(n) relative to the length of the first list
     
     List     -> List   -> List
   ( nil()       x     ) = x
   ( cons(x xs)  y     ) = cons(x, concat(xs y))
   --------------------------------------------
   ( [1] [2] ) ? [1, 2]
   ( [1 3] [4 5] ) ? [1 3 4 5]
   ( [] [] ) ? []
   ( [] [1 2] ) ? [1 2]



map: 
-- Applies function f to every element in the list.  Map represents a
-- functor mapping between the types of f

     (Num -> Num) -> List         -> List
   ( f               nil()       ) = nil
   ( f               cons(x, xs) ) = cons(f(x) map(f, xs))
   -------------------------------------------------
   ( fib             [6]         ) ? [13]
   ( fib             [0, 1]      ) ? [1, 1]



any:
-- Maps f to list, and returns true if any element of the resultant list is  
-- true.  Short circuits at first true evaluation.

     (Num -> Bool) -> List        -> Bool
   ( _                nil()      ) = false
   ( f                cons(x xs) ) = f(x) | any(f, xs)
   --------------------------------------------------




--------------------------------------------------------------------------------
--
-- Math

fib: Num -> Num
fib( 0   )= 1
fib( 1   )= 1
fib( n   )= fib(n - 1) + fib(n - 2)
-----------------------------------
fib(6) ? 13     
fib(7) ? 21




--------------------------------------------------------------------------------
--
-- FFI

log: Int -> IO
log( x ) = `console.log(cxt.x);`

jquery: String -> String -> IO
jquery( id x ) = `$(cxt.id).html(cxt.x);`

