


module "Speed tests for the prelude"

    do! log "\r                                  "
        return true

    open prelude
    open prelude.speedtest
    open prelude.list
    open prelude.string

    inline
    euler_1 = `var sum = 0;
               for (var i = 1; i < 11111; i++) {
                   if (i % 3 == 0 || i % 5 == 0) sum += i;
               };
               return sum;`

    euler_2 x y when x < 3 = y
          | x y when x % 3 == 0 || x % 5 == 0 =
                euler_2 (x - 1) (y + 1)
          | x y = euler_2 (x - 1) y

    euler_3 x when x < 3 = 0
    euler_3 x = if x % 3 == 0 || x % 5 == 0
                then 1 + euler_3 (x - 1)
                else euler_3 (x - 1)

    euler_4 = yield 1 .. 11111 
                    |> filter (Î»x = x % 3 == 0 || x % 5 == 0)
                    |> sum

    do! w <- time euler_1
        x <- time yield euler_2 11111 0
        y <- time yield euler_3 11111
        z <- time euler_4

        log "Native JS:   `w / 1000`s"
        log "Formal TCO:  `x / 1000`s"
        log "Formal Rec:  `y / 1000`s"
        log "Formal list: `z / 1000`s"
        
        return <| (x < y && y < z)



module "Tests for partial records"

    open prelude

    var f {a: x, b: y, _ } = x + y
    f { a: 5, b: 5, c: 5 } == f { a: 5, b: 5, d: 5 }

    var f {a: 1, b: 1, _ } = 2
        f {b: 2, c: 2, _ } = 2
    f {a:1,b:1,c:3,d:5} + f {a:1,b:2,c:2,e:5} == 4
      
    var f { a = 1, b = 2, _ } = 1
        g { b = 2, c = 3, _ } = 2
        x = { a = 1, b = 2, c = 3, d = 4 }
    f x + 1 == g x

module "Tests for TCO bugs"
    
    open prelude
    open prelude.list

    rev_1 y = 
        var r rest [:] = rest
            | rest { head: x, tail: xs } = 
                r (x :: rest) xs

        r {nil} y

    rev_2 = 
        var rrr rest [:] = rest
            rrr rest { head: x, tail: xs } = 
                rrr (x :: rest) xs

        rrr {nil}
     
    rev_2 [: 1, 2, 3, 4 ] == [: 4, 3, 2, 1 ]

    test_x  = [: 1, 2, 3, 4 ]

    rev_2 test_x == rev_1 test_x
    length (rev_2 test_x) == length (rev_1 test_x)
    length (rev_2 test_x) == length test_x


module "Tests for parser bugs"

    open prelude
    open prelude.string
    open prelude.html

    var x = do! `[ { x: 1}, {x: 2}, {x: 3} ]`
    stringify (x !! 0).x == "1"


