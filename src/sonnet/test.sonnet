

this is a comment

palette: →

    type X= Int
    type X = Int
    type X a= Int
    type X a = Int

    type F = Int->Int
    type F=Int->Int

    type G = Int -> Int -> Int

    type XXX = (Int -> Int)

   I'm a comment!

                          -> Int

These are some tricky type signatures to parse

    type G=(Int→Int)→(Int→Int)
    type G=(Int->Int) | Int
            | Str

    type H = { x : Int }
    type H = {x:Int,y:Str}

    type I = {x:Int}->{x:Int, y:Int}->(Int->{x:Int->Int,y:Int|Str})->Int

    type I = {x:Int}->{ x:Int, 
                        y:Int
             }
             ->(Int->{x:Int
                      ->Int,y:Int|Str})->Int

    type X m a = X a b c -> m d e
    type Y m a = Y a (m b) -> Y a {x: m a}

These are union types

    type R = Str | Int 
             | Int

    type Z = Int | Int -> Int | Str

These are some named types, with some sneaky whitespace errors (do not edit)

    type Q = true of {} | false of {}  
    
      
  
    type Option a = some of a | none of {} | any of Int -> Int | Str | none of {}   

this is another comment

    x
     : Int 
     | = 1
    
    x : Int | = 1

    test: Int -> Int
        | x   = "test" 
        | y   = "fail"
        | z   = 1

    xx: Str -> Int
      | x   = 1

    type X = Int





